from __future__ import annotations
import os
import sqlite3
import logging
from datetime import datetime, timezone, time
from typing import List

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ===================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====================
VIDEO_SOURCES: List[str] = [
    "BAACAgIAAxkBAAMIaNlpPylHKMYZj9MoYA6dWh83VKQAArd8AALpGdBKSyJjl6C4OTY2BA",
    "BAACAgIAAxkBAAMKaNlpu6rlFEbEpZ0gvlr8IhCEBG4AAsR8AALpGdBKG8dSjvSb6zs2BA",
    "BAACAgIAAxkBAAMMaNlqRSFlK2EJnZLZ5PqCqFevI58AAtB8AALpGdBKdF_gAAHRlt5TNgQ",
    "BAACAgIAAxkBAAMOaNlqgMIQXDCMQGlEqiPM0FCp27MAAtV8AALpGdBKG_9JlTB3Xng2BA",
    "BAACAgIAAxkBAAMQaNlqyuOKdAUNmWZPXA8n7Ghsvc0AAt18AALpGdBKqWm7YCaVTDU2BA",
    "BAACAgIAAxkBAAMSaNlrBt0eBjzX3JjxNyjRDSwYeoMAAuV8AALpGdBKcvo-xakimQc2BA",
    "BAACAgIAAxkBAAMUaNlreqvtgzvK40SXJhI_Eybqb7cAAu98AALpGdBKP1_258Gm8N42BA",
]

BEFORE_TEXTS: List[str] = [
    """–ü—Ä–∏–≤—ñ—Ç üëã
–í—ñ—Ç–∞—é —Ç–µ–±–µ –Ω–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤—ñ ¬´–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —É –∂–∏—Ç—Ç—ñ¬ª!
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –¶–µ –¥—Ä—É–≥–∏–π –¥–µ–Ω—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É ¬´–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —É –∂–∏—Ç—Ç—ñ¬ª.
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –¶–µ –≤–∂–µ —Ç—Ä–µ—Ç—ñ–π –¥–µ–Ω—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É.
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –°—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ç–≤–µ—Ä—Ç–∏–π –¥–µ–Ω—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É.
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –¶–µ –≤–∂–µ –ø‚Äô—è—Ç–∏–π –¥–µ–Ω—å üöÄ
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –î–µ–Ω—å —à–æ—Å—Ç–∏–π, —ñ –≤—ñ–Ω –ø—Ä–æ –≥–æ–ª–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ —Ä–æ—Å—Ç—É ‚Äî —Ç–≤—ñ–π –¥–æ—Å–≤—ñ–¥.
...""",
    """–ü—Ä–∏–≤—ñ—Ç! –ú–∏ –Ω–∞ —Ñ—ñ–Ω—ñ—à—ñ üéâ –¶–µ —Å—å–æ–º–∏–π –¥–µ–Ω—å —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É.
...""",
]

AFTER_TEXTS: List[str] = [
    "üéØ –°—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è, –ø–µ—Ä—à –Ω—ñ–∂ –∑—Ä–æ–±–∏—Ç–∏ –±—É–¥—å-—è–∫—É –¥—ñ—é, –ø–æ—Å—Ç–∞–≤ —Å–æ–±—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n¬´–ß–∏ –Ω–∞–±–ª–∏–∂–∞—î —Ü–µ –º–µ–Ω–µ –¥–æ –º–æ—î—ó –≤–µ–ª–∏–∫–æ—ó –º–µ—Ç–∏?¬ª",
    "üéØ –ó–∞ 10 —Ö–≤–∏–ª–∏–Ω —Å—Ñ–æ—Ä–º—É–ª—é–π –æ–¥–Ω—É —Ä—ñ—á–Ω—É —Ü—ñ–ª—å –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é:\n[–†–µ–∑—É–ª—å—Ç–∞—Ç] + [–í–∏–º—ñ—Ä—é—î—Ç—å—Å—è —á–∏–º] + [–¢–µ—Ä–º—ñ–Ω] + [–ù–∞–≤—ñ—â–æ].",
    "üéØ –í—ñ–∑—å–º–∏ –æ–¥–Ω—É –∞–∫—Ç—É–∞–ª—å–Ω—É –ø—Ä–æ–±–ª–µ–º—É (—Ä–æ–±–æ—á—É —á–∏ –æ—Å–æ–±–∏—Å—Ç—É) —ñ —Ä–æ–∑–¥—ñ–ª–∏ —ó—ó –Ω–∞ –¥–≤–∞ —Å–ø–∏—Å–∫–∏: —Ñ–∞–∫—Ç–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó.",
    "üéØ –û–±–µ—Ä–∏ –æ–¥–Ω—É –ø–æ–¥—ñ—é –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º—ñ—Å—è—Ü—å —ñ –ø—Ä–æ–ø–∏—à–∏ 3 —Å—Ü–µ–Ω–∞—Ä—ñ—ó: A, B, C.",
    "üéØ –ó–≥–∞–¥–∞–π —Å–∏—Ç—É–∞—Ü—ñ—é, —è–∫–∞ –∑–∞—Ä–∞–∑ ¬´—Ç—è–≥–Ω–µ –µ–Ω–µ—Ä–≥—ñ—é¬ª —ñ –Ω–µ —Ä—É—Ö–∞—î—Ç—å—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π ¬´–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤¬ª.",
    "üéØ –í—ñ–∑—å–º–∏ –æ–¥–Ω—É –ø–æ–¥—ñ—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å —ñ –∑—Ä–æ–±–∏ –º–µ—Ç–æ–¥ Stop‚ÄìStart‚ÄìContinue.",
    "üéØ –°—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä–µ–Ω—É–π—Å—è –±—Ä–∞—Ç–∏ –ø–∞—É–∑—É —Ö–æ—á–∞ –± –Ω–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏ —Ä—ñ—à–µ–Ω–Ω—è —Å–ø—Ä–∞–≤–¥—ñ —Ç–≤–æ—î, —á–∏ –π–æ–≥–æ –Ω–∞–≤‚Äô—è–∑—É—é—Ç—å.",
]

EXTRA_FILES = {
    2: {"file_id": "BQACAgIAAxkBAAMWaNlrlhmIMxyw83LziEfWwjhElE0AAvV8AALpGdBKtgyt93qRCbA2BA", "caption": "üìÑ –û–±—ñ—Ü—è–Ω–∏–π —Ñ–∞–π–ª –¥–æ –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è üöÄ"},
    4: {"file_id": "BQACAgIAAxkBAAMYaNlrtQABjOzo9ZfJkpx6ELmPGMsBAAL5fAAC6RnQSpLVoM23a5PnNgQ", "caption": "üìÑ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –¥–Ω—è ‚úÖ"}
}

DB_PATH = os.environ.get("DB_PATH", "users.db")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7416498608:AAF_uTo0H3Obrr9eTfnJB9Zdd2KrChDFIjA")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    started_at TEXT NOT NULL,
    last_index INTEGER NOT NULL DEFAULT -1
);
"""
UPSERT_USER_SQL = (
    "INSERT INTO users(chat_id, started_at, last_index) VALUES(?, ?, ?) "
    "ON CONFLICT(chat_id) DO UPDATE SET started_at=excluded.started_at;"
)
UPDATE_LAST_INDEX_SQL = "UPDATE users SET last_index=? WHERE chat_id=?;"
DELETE_USER_SQL = "DELETE FROM users WHERE chat_id=?;"
GET_ALL_USERS_SQL = "SELECT chat_id, started_at, last_index FROM users;"


def get_db_conn():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA journal_mode=WAL;")
    return conn


# ===================== –õ–û–ì–Ü–ö–ê –í–Ü–î–ü–†–ê–í–ö–ò =====================
async def send_video_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    chat_id = job.chat_id
    try:
        conn = get_db_conn()
        cur = conn.cursor()
        cur.execute("SELECT last_index FROM users WHERE chat_id=?;", (chat_id,))
        row = cur.fetchone()
        if not row:
            job.schedule_removal()
            return

        last_index = row[0]
        next_index = last_index + 1

        if next_index >= 8:
            final_text = "–§—ñ–Ω–∞–ª..."  # —Å–∫–æ—Ä–æ—á–µ–Ω–æ
            await context.bot.send_message(chat_id=chat_id, text=final_text)
            await context.bot.send_video(chat_id=chat_id, video="–í–ê–®_–§–Ü–ù–ê–õ–¨–ù–ò–ô_VIDEO_FILE_ID")
            cur.execute(UPDATE_LAST_INDEX_SQL, (next_index, chat_id))
            conn.commit()
            job.schedule_removal()
            return

        # –ü–µ—Ä–µ–¥ –≤—ñ–¥–µ–æ
        if next_index < len(BEFORE_TEXTS):
            await context.bot.send_message(chat_id=chat_id, text=BEFORE_TEXTS[next_index])

        # –í—ñ–¥–µ–æ
        source = VIDEO_SOURCES[next_index % len(VIDEO_SOURCES)]
        await context.bot.send_video(chat_id=chat_id, video=source, caption=f"üé¨ –í—ñ–¥–µ–æ {next_index + 1} –∑ 7")

        # –û–Ω–æ–≤–ª—é—î–º–æ last_index
        cur.execute(UPDATE_LAST_INDEX_SQL, (next_index, chat_id))
        conn.commit()

        # –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ after_text –Ω–∞ 07:20
        context.job_queue.run_daily(
            send_after_text_job,
            time=time(7, 20),
            chat_id=chat_id,
            name=f"after_text_{chat_id}",
        )

    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", chat_id)
    finally:
        conn.close()


async def send_after_text_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    chat_id = job.chat_id
    try:
        conn = get_db_conn()
        cur = conn.cursor()
        cur.execute("SELECT last_index FROM users WHERE chat_id=?;", (chat_id,))
        row = cur.fetchone()
        if not row:
            job.schedule_removal()
            return

        last_index = row[0]
        day_num = last_index + 1

        if last_index < len(AFTER_TEXTS):
            await context.bot.send_message(chat_id=chat_id, text=AFTER_TEXTS[last_index])

        if day_num in EXTRA_FILES:
            extra = EXTRA_FILES[day_num]
            await context.bot.send_document(chat_id=chat_id, document=extra["file_id"], caption=extra["caption"])

        job.schedule_removal()

    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ after_text %s", chat_id)
    finally:
        conn.close()


# ===================== –•–ï–ù–î–õ–ï–†–ò =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    conn = get_db_conn()
    with conn:
        conn.execute(
            UPSERT_USER_SQL,
            (chat_id, datetime.now(timezone.utc).isoformat(), -1),
        )
    conn.close()

    first_video_index = 0
    await context.bot.send_video(chat_id=chat_id, video=VIDEO_SOURCES[first_video_index], caption=BEFORE_TEXTS[first_video_index])

    conn = get_db_conn()
    with conn:
        conn.execute(UPDATE_LAST_INDEX_SQL, (first_video_index, chat_id))
    conn.close()

    schedule_user_job(context, chat_id)
    await update.message.reply_text("–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ, –¥–∞–ª—ñ —â–æ–¥–Ω—è –æ 07:01 + after-text –æ 07:20.")


def schedule_user_job(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    name = f"daily_video_{chat_id}"
    for j in context.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

    context.job_queue.run_daily(
        send_video_job,
        time=time(7, 1),
        chat_id=chat_id,
        name=name,
    )

    # –ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ –æ–¥—Ä–∞–∑—É
    first_video_index = 0
    await context.bot.send_video(
        chat_id=chat_id,
        video=VIDEO_SOURCES[first_video_index],
        caption=BEFORE_TEXTS[first_video_index],
    )

    # –û–Ω–æ–≤–ª—é—î–º–æ last_index = 0, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ –±—É–ª–æ —ñ–Ω–¥–µ–∫—Å 1
    conn = get_db_conn()
    with conn:
        conn.execute(UPDATE_LAST_INDEX_SQL, (first_video_index, chat_id))
    conn.close()

    # –ü–ª–∞–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    schedule_user_job(context, chat_id)

    await update.message.reply_text("‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è! –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ—á–∞–ª–∞—Å—å.")


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id

    # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–¥–∞—á—ñ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
    for j in context.job_queue.get_jobs_by_name(f"daily_video_{chat_id}"):
        j.schedule_removal()

    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
    conn = get_db_conn()
    with conn:
        conn.execute(DELETE_USER_SQL, (chat_id,))
    conn.close()

    await update.message.reply_text(
        "üõë –ó—É–ø–∏–Ω–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É –π –≤–∏–¥–∞–ª–∏–≤ —Ç–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å.\n"
        "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ /start"
    )


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id

    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute("SELECT started_at, last_index FROM users WHERE chat_id=?;", (chat_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ /start")
        return

    started_at, last_index = row
    total = len(VIDEO_SOURCES)
    sent = max(0, last_index + 1)

    await update.message.reply_text(
        f"üìÖ –°—Ç–∞—Ä—Ç: <code>{started_at}</code>\n"
        f"üì¶ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: <b>{sent}</b> —ñ–∑ <b>{total}</b>\n"
        f"(—â–æ–¥–Ω—è –æ 10:01 –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –≤—ñ–¥–µ–æ –∑ —Ç–µ–∫—Å—Ç–∞–º–∏)",
        parse_mode=ParseMode.HTML,
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –Ø –Ω–∞–¥—Å–∏–ª–∞—é –≤—ñ–¥–µ–æ —â–æ–¥–Ω—è –æ 10:01 –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /start.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n"
        "/stop ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n"
        "/status ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å\n"
        "/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞"
    )


async def echo_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message:
        # –í—ñ–¥–µ–æ
        if update.message.video:
            await update.message.reply_text(
                f"üé• –û—Ç—Ä–∏–º–∞–≤ video file_id: <code>{update.message.video.file_id}</code>",
                parse_mode=ParseMode.HTML,
            )
        # –î–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX, ZIP, —Ç–æ—â–æ)
        elif update.message.document:
            await update.message.reply_text(
                f"üìÇ –û—Ç—Ä–∏–º–∞–≤ document file_id: <code>{update.message.document.file_id}</code>",
                parse_mode=ParseMode.HTML,
            )


# ===================== INIT APP =====================

async def post_init(app: Application) -> None:
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    conn = get_db_conn()
    with conn:
        conn.execute(CREATE_TABLE_SQL)
    conn.close()

    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute(GET_ALL_USERS_SQL)
    rows = cur.fetchall()
    conn.close()

    for chat_id, _, last_index in rows:
        if last_index < 8:  # –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
            app.job_queue.run_daily(
                send_video_job,
                time=time(7, 1),
                chat_id=chat_id,
                name=f"daily_video_{chat_id}",
            )
            logger.info(
                "–í—ñ–¥–Ω–æ–≤–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è chat_id=%s (last_index=%s)",
                chat_id, last_index
            )


def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    # –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("status", status_cmd))
    application.add_handler(CommandHandler("help", help_cmd))

    # –•–µ–Ω–¥–ª–µ—Ä —Ñ–∞–π–ª—ñ–≤ (–≤—ñ–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∏)
    application.add_handler(
        MessageHandler(
            (filters.VIDEO | filters.Document.ALL) & filters.ChatType.PRIVATE,
            echo_file,
        )
    )

    application.run_polling()



