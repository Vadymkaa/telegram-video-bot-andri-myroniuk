from __future__ import annotations
import os
import sqlite3
import logging
from datetime import datetime, timezone, time
from typing import List

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ===================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====================
VIDEO_SOURCES: List[str] = [
    "BAACAgIAAxkBAAIBF2jYWKJ-oU85gIgRpEtI61aH4qaDAAJ-jQACdPzBSpHZRi2F_qMjNgQ",
    "BAACAgIAAxkBAAIBF2jYWKJ-oU85gIgRpEtI61aH4qaDAAJ-jQACdPzBSpHZRi2F_qMjNgQ",
    # –¥–æ–¥–∞–π—Ç–µ —â–µ —Å–≤–æ—ó –≤—ñ–¥–µ–æ
]

DB_PATH = os.environ.get("DB_PATH", "users.db")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8101668293:AAE9nLdtt7f3C7JZ97Nt6j5NcEgBVstTjKI")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ===================== –ë–ê–ó–ê –î–ê–ù–ò–• =====================
CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    started_at TEXT NOT NULL,
    last_index INTEGER NOT NULL DEFAULT -1
);
"""

UPSERT_USER_SQL = (
    "INSERT INTO users(chat_id, started_at, last_index) VALUES(?, ?, ?) "
    "ON CONFLICT(chat_id) DO UPDATE SET started_at=excluded.started_at;"
)
UPDATE_LAST_INDEX_SQL = "UPDATE users SET last_index=? WHERE chat_id=?;"
DELETE_USER_SQL = "DELETE FROM users WHERE chat_id=?;"
GET_ALL_USERS_SQL = "SELECT chat_id, started_at, last_index FROM users;"


def get_db_conn():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA journal_mode=WAL;")
    return conn


# ===================== –õ–û–ì–Ü–ö–ê –í–Ü–î–ü–†–ê–í–ö–ò =====================
async def send_next_video(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É 7 –≤—ñ–¥–µ–æ –ø—ñ–¥—Ä—è–¥ —â–æ–¥–Ω—è –æ 10:01"""
    job = context.job
    chat_id = job.chat_id

    if not VIDEO_SOURCES:
        logger.warning("VIDEO_SOURCES –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù—ñ—á–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏.")
        return

    try:
        conn = get_db_conn()
        cur = conn.cursor()
        cur.execute("SELECT last_index FROM users WHERE chat_id=?;", (chat_id,))
        row = cur.fetchone()
        if row is None:
            job.schedule_removal()
            return

        last_index = row[0]

        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥—Ä–∞–∑—É 7 –≤—ñ–¥–µ–æ
        for i in range(7):
            next_index = (last_index + 1 + i) % len(VIDEO_SOURCES)
            source = VIDEO_SOURCES[next_index]

            await context.bot.send_video(
                chat_id=chat_id,
                video=source,
                caption=f"–í—ñ–¥–µ–æ {next_index + 1} –∑ {len(VIDEO_SOURCES)} üé¨"
            )

        # –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω–¥–µ–∫—Å (–æ—Å—Ç–∞–Ω–Ω—î –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ)
        cur.execute(UPDATE_LAST_INDEX_SQL, ((last_index + 7) % len(VIDEO_SOURCES), chat_id))
        conn.commit()
    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", chat_id)
    finally:
        conn.close()


def schedule_user_job(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    """–ó–∞–ø—É—Å–∫–∞—î —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –æ 10:01"""
    name = f"daily_video_{chat_id}"
    for j in context.job_queue.get_jobs_by_name(name):
        j.schedule_removal()

    context.job_queue.run_daily(
        send_next_video,
        time=time(10, 1),  # –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –æ 10:01
        chat_id=chat_id,
        name=name,
    )


# ===================== –•–ï–ù–î–õ–ï–†–ò =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    conn = get_db_conn()
    with conn:
        conn.execute(
            UPSERT_USER_SQL,
            (chat_id, datetime.now(timezone.utc).isoformat(), -1),
        )
    conn.close()

    # –æ–¥—Ä–∞–∑—É –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ
    first_video = VIDEO_SOURCES[0]
    await context.bot.send_video(
        chat_id=chat_id,
        video=first_video,
        caption="–ü–µ—Ä—à–µ –≤—ñ–¥–µ–æ –æ–¥—Ä–∞–∑—É üé¨"
    )

    # —Å—Ç–∞–≤–∏–º–æ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É
    schedule_user_job(context, chat_id)

    await update.message.reply_text(
        f"–í—ñ—Ç–∞—é, {update.effective_user.first_name or '–¥—Ä—É–∂–µ'}! "
        f"–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –ø–µ—Ä—à–µ –≤—ñ–¥–µ–æ –æ–¥—Ä–∞–∑—É, –∞ –¥–∞–ª—ñ —â–æ–¥–Ω—è –æ 10:01 –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ 7 –Ω–æ–≤–∏—Ö."
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    for j in context.job_queue.get_jobs_by_name(f"daily_video_{chat_id}"):
        j.schedule_removal()

    conn = get_db_conn()
    with conn:
        conn.execute(DELETE_USER_SQL, (chat_id,))
    conn.close()

    await update.message.reply_text("–ó—É–ø–∏–Ω–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É –π –≤–∏–¥–∞–ª–∏–≤ —Ç–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å: /start")


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute("SELECT started_at, last_index FROM users WHERE chat_id=?;", (chat_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("–¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ /start")
        return

    started_at, last_index = row
    total = len(VIDEO_SOURCES)
    sent = max(0, last_index + 1)

    await update.message.reply_text(
        f"–°—Ç–∞—Ä—Ç: <code>{started_at}</code>\n"
        f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ: <b>{sent}</b> —ñ–∑ <b>{total}</b>\n"
        f"(—â–æ–¥–Ω—è –æ 10:01 –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è 7 –≤—ñ–¥–µ–æ)",
        parse_mode=ParseMode.HTML,
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–Ø –Ω–∞–¥—Å–∏–ª–∞—é 7 –≤—ñ–¥–µ–æ —â–æ–¥–Ω—è –æ 10:01 –ø—ñ—Å–ª—è /start.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n/stop ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n/status ‚Äî –ø—Ä–æ–≥—Ä–µ—Å\n/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞"
    )


async def echo_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message and update.message.video:
        await update.message.reply_text(
            f"–û—Ç—Ä–∏–º–∞–≤ file_id: <code>{update.message.video.file_id}</code>",
            parse_mode=ParseMode.HTML,
        )


# ===================== INIT APP =====================
async def post_init(app: Application) -> None:
    conn = get_db_conn()
    with conn:
        conn.execute(CREATE_TABLE_SQL)
    conn.close()

    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute(GET_ALL_USERS_SQL)
    rows = cur.fetchall()
    conn.close()

    for chat_id, _, last_index in rows:
        app.job_queue.run_daily(
            send_next_video,
            time=time(10, 1),
            chat_id=chat_id,
            name=f"daily_video_{chat_id}",
        )
        logger.info("–í—ñ–¥–Ω–æ–≤–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è chat_id=%s (last_index=%s)", chat_id, last_index)


def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("status", status_cmd))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(MessageHandler(filters.VIDEO & filters.ChatType.PRIVATE, echo_video))

    # üîë –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling –≤–∏–¥–∞–ª—è—î–º–æ webhook
    application.bot.delete_webhook(drop_pending_updates=True)

    application.run_polling(close_loop=False)


if __name__ == "__main__":
    main()


