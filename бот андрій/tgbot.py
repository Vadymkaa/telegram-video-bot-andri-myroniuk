from __future__ import annotations
import os
import sqlite3
import logging
from datetime import datetime, timezone, time
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ===================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====================
VIDEO_SOURCES: List[str] = [
    "BAACAgIAAxkBAAMIaNlpPylHKMYZj9MoYA6dWh83VKQAArd8AALpGdBKSyJjl6C4OTY2BA",
    "BAACAgIAAxkBAAMKaNlpu6rlFEbEpZ0gvlr8IhCEBG4AAsR8AALpGdBKG8dSjvSb6zs2BA",
    "BAACAgIAAxkBAAMMaNlqRSFlK2EJnZLZ5PqCqFevI58AAtB8AALpGdBKdF_gAAHRlt5TNgQ",
    "BAACAgIAAxkBAAMOaNlqgMIQXDCMQGlEqiPM0FCp27MAAtV8AALpGdBKG_9JlTB3Xng2BA",
    "BAACAgIAAxkBAAMQaNlqyuOKdAUNmWZPXA8n7Ghsvc0AAt18AALpGdBKqWm7YCaVTDU2BA",
    "BAACAgIAAxkBAAMSaNlrBt0eBjzX3JjxNyjRDSwYeoMAAuV8AALpGdBKcvo-xakimQc2BA",
    "BAACAgIAAxkBAAMUaNlreqvtgzvK40SXJhI_Eybqb7cAAu98AALpGdBKP1_258Gm8N42BA",
]

BEFORE_TEXTS: List[str] = [
    """–ü—Ä–∏–≤—ñ—Ç üëã
–í—ñ—Ç–∞—é —Ç–µ–±–µ –Ω–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤—ñ ¬´–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —É –∂–∏—Ç—Ç—ñ¬ª!

–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ê–Ω–¥—Ä—ñ–π –ú–∏—Ä–æ–Ω—é–∫ —ñ —Ü—é 7-–¥–µ–Ω–Ω—É –ø–æ–¥–æ—Ä–æ–∂ –º–∏ –ø—Ä–æ–π–¥–µ–º–æ —Ä–∞–∑–æ–º. –ü–ª–∞–Ω —Ç–∞–∫–∏–π: —â–æ—Ä–∞–Ω–∫—É —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ —Ç–∞ —à–≤–∏–¥–∫–∏–π –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–π–æ–º (Quick Win). –Ü–Ω–∫–æ–ª–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏.

–ì–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–≤—á–∏—Ç–∏—Å—è –º–∏—Å–ª–∏—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ –Ω–µ –ª–∏—à–µ —É –±—ñ–∑–Ω–µ—Å—ñ, –∞ –π —É —â–æ–¥–µ–Ω–Ω–æ–º—É –∂–∏—Ç—Ç—ñ: —É —Å—Ç–æ—Å—É–Ω–∫–∞—Ö, –∫–∞—Ä‚Äô—î—Ä—ñ, —Ñ—ñ–Ω–∞–Ω—Å–∞—Ö —á–∏ –∑–¥–æ—Ä–æ–≤‚Äô—ó.

–¢–æ–º—É –Ω–∞–ª–∞—à—Ç—É–π—Å—è –Ω–∞ –µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: 7 –¥–Ω—ñ–≤ —É–≤–∞–∂–Ω–æ—Å—Ç—ñ, –∫—Ä–∞—â–∏—Ö —Ä—ñ—à–µ–Ω—å —ñ –±—ñ–ª—å—à–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –Ω–∞–¥ –≤–ª–∞—Å–Ω–∏–º –∂–∏—Ç—Ç—è–º.

–¢–æ–º—É —Å—Ç–∞—Ä—Ç—É—î–º–æ üöÄ
‚ùì–ß–æ–º—É –æ–¥–Ω—ñ –ø–æ—Å—Ç—ñ–π–Ω–æ ¬´–≥–∞—Å—è—Ç—å –ø–æ–∂–µ–∂—ñ¬ª, –∞ —ñ–Ω—à—ñ –≤—Å—Ç–∏–≥–∞—é—Ç—å –±—É–¥—É–≤–∞—Ç–∏ –∂–∏—Ç—Ç—è, —è–∫–µ —Ö–æ—á—É—Ç—å?
–£ —Ü—å–æ–º—É —É—Ä–æ—Ü—ñ —Ç–∏ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ —Ç–∞–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —ñ —è–∫ –≤–æ–Ω–æ –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ —É –∫–∞—Ä‚Äô—î—Ä—ñ, —Ñ—ñ–Ω–∞–Ω—Å–∞—Ö, —Å—Ç–æ—Å—É–Ω–∫–∞—Ö —Ç–∞ –∑–¥–æ—Ä–æ–≤‚Äô—ó.

üé• –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥–µ–æ –∑–º–æ–∂–µ—à –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏ —Ç–∞–∫—Ç–∏—á–Ω—ñ –∫—Ä–æ–∫–∏ –≤—ñ–¥ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö —ñ –∑–º–µ–Ω—à–∏—à —Ö–∞–æ—Å —É —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ.

<b>–ê —è–∫—â–æ —Ö–æ—á–µ—à —â–µ –±—ñ–ª—å—à–µ —Ü—ñ–∫–∞–≤–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏—Ö –ø—Ä–∏–π–æ–º—ñ–≤ ‚Äî –ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –º—ñ–π Instagram üëá</b>
""",
    # ... –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–µ–∫—Å—Ç–∏ BEFORE_TEXTS
]

AFTER_TEXTS: List[str] = [
    "üéØ –°—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è, –ø–µ—Ä—à –Ω—ñ–∂ –∑—Ä–æ–±–∏—Ç–∏ –±—É–¥—å-—è–∫—É –¥—ñ—é, –ø–æ—Å—Ç–∞–≤ —Å–æ–±—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n¬´–ß–∏ –Ω–∞–±–ª–∏–∂–∞—î —Ü–µ –º–µ–Ω–µ –¥–æ –º–æ—î—ó –≤–µ–ª–∏–∫–æ—ó –º–µ—Ç–∏?¬ª",
    "üéØ –ó–∞ 10 —Ö–≤–∏–ª–∏–Ω —Å—Ñ–æ—Ä–º—É–ª—é–π –æ–¥–Ω—É —Ä—ñ—á–Ω—É —Ü—ñ–ª—å –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é:\n[–†–µ–∑—É–ª—å—Ç–∞—Ç] + [–í–∏–º—ñ—Ä—é—î—Ç—å—Å—è —á–∏–º] + [–¢–µ—Ä–º—ñ–Ω] + [–ù–∞–≤—ñ—â–æ].",
    "üéØ –í—ñ–∑—å–º–∏ –æ–¥–Ω—É –∞–∫—Ç—É–∞–ª—å–Ω—É –ø—Ä–æ–±–ª–µ–º—É (—Ä–æ–±–æ—á—É —á–∏ –æ—Å–æ–±–∏—Å—Ç—É) —ñ —Ä–æ–∑–¥—ñ–ª–∏ —ó—ó –Ω–∞ –¥–≤–∞ —Å–ø–∏—Å–∫–∏: —Ñ–∞–∫—Ç–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó.",
    "üéØ –û–±–µ—Ä–∏ –æ–¥–Ω—É –ø–æ–¥—ñ—é –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º—ñ—Å—è—Ü—å —ñ –ø—Ä–æ–ø–∏—à–∏ 3 —Å—Ü–µ–Ω–∞—Ä—ñ—ó: A, B, C.",
    "üéØ –ó–≥–∞–¥–∞–π —Å–∏—Ç—É–∞—Ü—ñ—é, —è–∫–∞ –∑–∞—Ä–∞–∑ ¬´—Ç—è–≥–Ω–µ –µ–Ω–µ—Ä–≥—ñ—é¬ª —ñ –Ω–µ —Ä—É—Ö–∞—î—Ç—å—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π ¬´–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä—å–æ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤¬ª.",
    "üéØ –í—ñ–∑—å–º–∏ –æ–¥–Ω—É –ø–æ–¥—ñ—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å —ñ –∑—Ä–æ–±–∏ –º–µ—Ç–æ–¥ Stop‚ÄìStart‚ÄìContinue.",
    "üéØ –°—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä–µ–Ω—É–π—Å—è –±—Ä–∞—Ç–∏ –ø–∞—É–∑—É —Ö–æ—á–∞ –± –Ω–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏ —Ä—ñ—à–µ–Ω–Ω—è —Å–ø—Ä–∞–≤–¥—ñ —Ç–≤–æ—î, —á–∏ –π–æ–≥–æ –Ω–∞–≤‚Äô—è–∑—É—é—Ç—å.",
]

EXTRA_FILES = {
    2: {"file_id": "BQACAgIAAxkBAAMWaNlrlhmIMxyw83LziEfWwjhElE0AAvV8AALpGdBKtgyt93qRCbA2BA",
        "caption": "üìÑ –û–±—ñ—Ü—è–Ω–∏–π —Ñ–∞–π–ª –¥–æ –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è üöÄ"},
    4: {"file_id": "BQACAgIAAxkBAAMYaNlrtQABjOzo9ZfJkpx6ELmPGMsBAAL5fAAC6RnQSpLVoM23a5PnNgQ",
        "caption": "üìÑ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –¥–Ω—è ‚úÖ"}
}

DB_PATH = os.environ.get("DB_PATH", "users.db")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7416498608:AAF_uTo0H3Obrr9eTfnJB9Zdd2KrChDFIjA")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ===================== SQL =====================
CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    started_at TEXT NOT NULL,
    last_index INTEGER NOT NULL DEFAULT -1
);
"""
UPSERT_USER_SQL = (
    "INSERT INTO users(chat_id, started_at, last_index) VALUES(?, ?, ?) "
    "ON CONFLICT(chat_id) DO UPDATE SET started_at=excluded.started_at;"
)
UPDATE_LAST_INDEX_SQL = "UPDATE users SET last_index=? WHERE chat_id=?;"
DELETE_USER_SQL = "DELETE FROM users WHERE chat_id=?;"
GET_ALL_USERS_SQL = "SELECT chat_id, started_at, last_index FROM users;"


def get_db_conn():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("PRAGMA journal_mode=WAL;")
    return conn


# ===================== –•–ï–õ–ü–ï–†: –∑–∞—Ö–∏—â–µ–Ω–µ –≤—ñ–¥–µ–æ =====================
async def send_protected_video(context: ContextTypes.DEFAULT_TYPE, chat_id: int, source: str, caption: str | None = None):
    """–ù–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–µ–æ –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏)."""
    await context.bot.send_video(
        chat_id=chat_id,
        video=source,
        caption=caption,
        parse_mode=ParseMode.HTML,
        protect_content=True,
        supports_streaming=True
    )


# ===================== –õ–û–ì–Ü–ö–ê –í–Ü–î–ü–†–ê–í–ö–ò =====================
async def send_video_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id

    try:
        conn = get_db_conn()
        cur = conn.cursor()
        cur.execute("SELECT last_index FROM users WHERE chat_id=?", (chat_id,))
        row = cur.fetchone()
        if not row:
            job.schedule_removal()
            return

        last_index = row[0]
        next_index = last_index + 1

        if next_index >= len(VIDEO_SOURCES):
            await context.bot.send_message(chat_id=chat_id, text="üìå –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            job.schedule_removal()
            return

        if next_index < len(BEFORE_TEXTS):
            await context.bot.send_message(
                chat_id=chat_id,
                text=BEFORE_TEXTS[next_index],
                parse_mode=ParseMode.HTML
            )

        await send_protected_video(
            context,
            chat_id,
            VIDEO_SOURCES[next_index],
            caption=f"üé¨ –í—ñ–¥–µ–æ {next_index + 1} –∑ {len(VIDEO_SOURCES)}"
        )

        cur.execute(UPDATE_LAST_INDEX_SQL, (next_index, chat_id))
        conn.commit()

        context.job_queue.run_daily(
            send_after_text_job,
            time=time(7, 20),
            chat_id=chat_id,
            name=f"after_text_{chat_id}"
        )

    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", chat_id)
    finally:
        conn.close()


async def send_after_text_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id

    try:
        conn = get_db_conn()
        cur = conn.cursor()
        cur.execute("SELECT last_index FROM users WHERE chat_id=?", (chat_id,))
        row = cur.fetchone()
        if not row:
            job.schedule_removal()
            return

        last_index = row[0]
        day_num = last_index + 1

        if last_index < len(AFTER_TEXTS):
            await context.bot.send_message(chat_id=chat_id, text=AFTER_TEXTS[last_index])

        if last_index == 6:
            context.job_queue.run_daily(
                send_day8_text,
                time=time(7, 1),
                chat_id=chat_id,
                name=f"day8_text_{chat_id}"
            )

        if day_num in EXTRA_FILES:
            extra = EXTRA_FILES[day_num]
            await context.bot.send_document(chat_id=chat_id, document=extra["file_id"], caption=extra["caption"])

        job.schedule_removal()

    except Exception:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ after_text %s", chat_id)
    finally:
        conn.close()


async def send_day8_text(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id

    day8_text = """–ù—É —â–æ, –≤—ñ—Ç–∞—é, —Ç–∏ –ø—Ä–æ–π—à–æ–≤ 7 –¥–Ω—ñ–≤ —ñ–Ω—Ç–µ–Ω—Å–∏–≤—É ¬´–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è —É –∂–∏—Ç—Ç—ñ¬ª!

–ó–∞ —Ü–µ–π —á–∞—Å —Ç–∏:
‚úî –ù–∞–≤—á–∏–≤—Å—è –±–∞—á–∏—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ —Ç–∞–∫—Ç–∏—á–Ω–∏–º–∏ –¥—ñ—è–º–∏ —ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏.
‚úî –°—Ñ–æ—Ä–º—É–ª—é–≤–∞–≤ —Å–≤–æ—é ¬´–ü—ñ–≤–Ω—ñ—á–Ω—É –∑—ñ—Ä–∫—É¬ª —ñ –ø—Ä–∏–±—Ä–∞–≤ –∑–∞–π–≤–µ.
‚úî –í—ñ–¥—Ä—ñ–∑–Ω—è—î—à —Ñ–∞–∫—Ç–∏ –≤—ñ–¥ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ–π —ñ –ø—Ä–∏–π–º–∞—î—à —Å–ø–æ–∫—ñ–π–Ω—ñ—à—ñ —Ä—ñ—à–µ–Ω–Ω—è.
‚úî –ù–∞–≤—á–∏–≤—Å—è –ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –π –±—É—Ç–∏ –≥–æ—Ç–æ–≤–∏–º –¥–æ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ–∫.
‚úî –ü–æ–±–∞—á–∏–≤, —è–∫ –≤–∞–∂–ª–∏–≤–æ –≥–Ω—É—á–∫–æ –º—ñ–Ω—è—Ç–∏ –ø—ñ–¥—Ö—ñ–¥.
‚úî –û—Å–≤–æ—ó–≤ —Ç–µ—Ö–Ω—ñ–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –¥–æ—Å–≤—ñ–¥—É Stop‚ÄìStart‚ÄìContinue.
‚úî –†–æ–∑–ø—ñ–∑–Ω–∞—î—à –ø–∞—Å—Ç–∫–∏ –π –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—ó —Ç–∞ —Ç—Ä–∏–º–∞—î—à –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–ª–∞—Å–Ω–∏–º–∏ —Ä—ñ—à–µ–Ω–Ω—è–º–∏.

–¶–µ –ª–∏—à–µ –ø–æ—á–∞—Ç–æ–∫. –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è ‚Äî —Ü–µ –Ω–µ —Ç–∞–ª–∞–Ω—Ç, –∞ –Ω–∞–≤–∏—á–∫–∞, —è–∫—É –º–æ–∂–Ω–∞ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ —â–æ–¥–Ω—è.
–Ü —Ç–µ–ø–µ—Ä —É —Ç–µ–±–µ —î —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, —â–æ–± –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —ó—ó —É –∫–∞—Ä‚Äô—î—Ä—ñ, —Ñ—ñ–Ω–∞–Ω—Å–∞—Ö, —Å—Ç–æ—Å—É–Ω–∫–∞—Ö —ñ –±—É–¥—å-—è–∫–∏—Ö –∂–∏—Ç—Ç—î–≤–∏—Ö –≤–∏–±–æ—Ä–∞—Ö.

üöÄ –ü–∞–º‚Äô—è—Ç–∞–π: –∫–æ–∂–Ω–µ —Ç–≤–æ—î —Ä—ñ—à–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –∞–±–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–º. –û–±–∏—Ä–∞–π –¥—Ä—É–≥–µ üòâ

–ê —â–µ –º–∞—î—à –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –≤—ñ–¥ –º–µ–Ω–µ

–î—è–∫—É—é, —â–æ –ø—Ä–æ–π—à–æ–≤ —Ü–µ–π —à–ª—è—Ö –∑—ñ –º–Ω–æ—é!
‚Äî –ê–Ω–¥—Ä—ñ–π –ú–∏—Ä–æ–Ω—é–∫"""

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ñ–Ω—Å—Ç—É üéØ", url="https://www.instagram.com/a_myroniuk/")]
    ])
    await context.bot.send_message(chat_id=chat_id, text=day8_text, reply_markup=keyboard)


# ===================== –•–ï–ù–î–õ–ï–† start =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    conn = get_db_conn()
    with conn:
        conn.execute(UPSERT_USER_SQL, (chat_id, datetime.now(timezone.utc).isoformat(), -1))
    conn.close()

    first_index = 0
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ —ñ–Ω—Å—Ç—É üéØ", url="https://www.instagram.com/a_myroniuk/")]
    ])

    await context.bot.send_video(
        chat_id=chat_id,
        video=VIDEO_SOURCES[first_index],
        caption=BEFORE_TEXTS[first_index],
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard,
        protect_content=True,
        supports_streaming=True
    )

    conn = get_db_conn()
    with conn:
        conn.execute(UPDATE_LAST_INDEX_SQL, (first_index, chat_id))
    conn.close()

    context.job_queue.run_once(
        send_after_text_job,
        when=15 * 60,
        chat_id=chat_id,
        name=f"after_text_{chat_id}_first"
    )

    schedule_user_job(context, chat_id)


def schedule_user_job(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    for j in context.job_queue.get_jobs_by_name(f"daily_video_{chat_id}"):
        j.schedule_removal()

    context.job_queue.run_daily(
        send_video_job,
        time=time(7, 1),
        chat_id=chat_id,
        name=f"daily_video_{chat_id}"
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    for j in context.job_queue.get_jobs_by_name(f"daily_video_{chat_id}"):
        j.schedule_removal()

    conn = get_db_conn()
    with conn:
        conn.execute(DELETE_USER_SQL, (chat_id,))
    conn.close()

    await update.message.reply_text("üõë –†–æ–∑—Å–∏–ª–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å –≤–∏–¥–∞–ª–µ–Ω–æ.")


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute("SELECT started_at, last_index FROM users WHERE chat_id=?", (chat_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("‚ÑπÔ∏è –¢–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –ù–∞—Ç–∏—Å–Ω–∏ /start")
        return

    started_at, last_index = row
    total = len(VIDEO_SOURCES)
    sent = max(0, last_index + 1)

    await update.message.reply_text(
        f"üìÖ –°—Ç–∞—Ä—Ç: <code>{started_at}</code>\nüì¶ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: <b>{sent}</b> —ñ–∑ <b>{total}</b>",
        parse_mode=ParseMode.HTML
    )


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –Ø –Ω–∞–¥—Å–∏–ª–∞—é –≤—ñ–¥–µ–æ —â–æ–¥–Ω—è –æ 07:01.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥–∏:\n/start ‚Äî –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n/stop ‚Äî –≤—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è\n/status ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å\n/help ‚Äî –¥–æ–≤—ñ–¥–∫–∞"
    )


async def echo_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.video:
        await update.message.reply_text(
            f"üé• video file_id: <code>{update.message.video.file_id}</code>",
            parse_mode=ParseMode.HTML
        )
    elif update.message.document:
        await update.message.reply_text(
            f"üìÇ document file_id: <code>{update.message.document.file_id}</code>",
            parse_mode=ParseMode.HTML
        )


# ===================== INIT APP =====================
async def post_init(app: Application):
    conn = get_db_conn()
    with conn:
        conn.execute(CREATE_TABLE_SQL)
    conn.close()

    conn = get_db_conn()
    cur = conn.cursor()
    cur.execute(GET_ALL_USERS_SQL)
    rows = cur.fetchall()
    conn.close()

    for chat_id, _, last_index in rows:
        if last_index < len(VIDEO_SOURCES):
            app.job_queue.run_daily(send_video_job, time=time(7, 1), chat_id=chat_id, name=f"daily_video_{chat_id}")
            logger.info("–í—ñ–¥–Ω–æ–≤–∏–≤ —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è chat_id=%s (last_index=%s)", chat_id, last_index)


def main():
    if not BOT_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ BOT_TOKEN —É
